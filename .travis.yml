---
language: node_js
node_js:
  - "10"

sudo: required

cache:
  yarn: true

before_install:
  - set -e
  - if [ "${TRAVIS_TAG?}" ]; then
      AWS_BUCKET="doi.datacite.org";
      AUTO_DEPLOY=true;
      DEPLOY_TARGET="production";
      cp .env.production .env;
    elif [ "$TRAVIS_BRANCH" == "master" ]; then
      AWS_BUCKET="doi.stage.datacite.org";
      CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID_STAGE;
      AUTO_DEPLOY=true;
      DEPLOY_TARGET="stage";
      cp .env.stage .env;
    else
      AWS_BUCKET="doi.stage.datacite.org";
      CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID_STAGE;
      DEPLOY_TARGET="stage";
      cp .env.stage .env;
    fi
  - npm config set spin false
  - npm install -g codeclimate-test-reporter
  - curl -o- -L https://yarnpkg.com/install.sh | bash
  - export PATH=$HOME/.yarn/bin:$PATH

install:
  - yarn install --non-interactive
  - sudo pip install awscli
  - curl -sL https://sentry.io/get-cli/ | bash
  - sentry-cli --version

before_script:
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build

script:
  - COVERAGE=true ember test
  - ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT
  - DEPLOY_TARGET=${DEPLOY_TARGET} ember build --environment=production

after_success:
  - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD";
  - REPO=datacite/bracco;
  - AUTO_DEPLOY=false;
  - if [ "${TRAVIS_TAG?}" ]; then
      docker build -f Dockerfile -t $REPO:$TRAVIS_TAG . --build-arg PASSENGER_APP_ENV=production;
      docker push $REPO:$TRAVIS_TAG;
      echo "Pushed to" $REPO:$TRAVIS_TAG;
      AUTO_DEPLOY=true;
    elif [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_PULL_REQUEST" == "false" ]]; then
      docker build -f Dockerfile -t $REPO .;
      docker push $REPO;
      echo "Pushed to" $REPO;
      AUTO_DEPLOY=true;
    else
      docker build -f Dockerfile -t $REPO:$TRAVIS_BRANCH .;
      docker push $REPO:$TRAVIS_BRANCH;
      echo "Pushed to" $REPO:$TRAVIS_BRANCH;
    fi

  - if [ "$AUTO_DEPLOY" == "true" ]; then
      wget https://github.com/jwilder/dockerize/releases/download/v0.6.0/dockerize-linux-amd64-v0.6.0.tar.gz;
      tar -xzvf dockerize-linux-amd64-v0.6.0.tar.gz;
      rm dockerize-linux-amd64-v0.6.0.tar.gz;
      export GIT_SHA=$(git rev-parse --short HEAD);
      export GIT_REVISION=$(git rev-parse HEAD);
      export GIT_TAG=$(git describe --tags $(git rev-list --tags --max-count=1));

      git clone "https://${TRAVIS_SECURE_TOKEN}@github.com/datacite/mastino.git";
      ./dockerize -template vendor/docker/_bracco.auto.tfvars.tmpl:mastino/stage/services/doi/_bracco.auto.tfvars;

      sentry-cli releases new bracco:${GIT_TAG} --finalize --project bracco;

      if [ "${TRAVIS_TAG?}" ]; then
        ./dockerize -template vendor/docker/_bracco.auto.tfvars.tmpl:mastino/prod-eu-west/services/doi/_bracco.auto.tfvars;
        sentry-cli releases deploys bracco:${GIT_TAG} new -e production;
      else
        sentry-cli releases deploys bracco:${GIT_TAG} new -e stage;
      fi

      sentry-cli releases set-commits --auto bracco:${GIT_TAG};
      
      cd mastino;
      git remote;
      git config user.email ${DOCKER_EMAIL};
      git config user.name ${DOCKER_USERNAME};
      
      if [ "${TRAVIS_TAG?}" ]; then
        git add prod-eu-west/services/doi/_bracco.auto.tfvars;
        git commit -m "Adding bracco git variables for commit tagged ${TRAVIS_TAG?}";
        git push "https://${TRAVIS_SECURE_TOKEN}@github.com/datacite/mastino.git" master;
      else
        git add stage/services/doi/_bracco.auto.tfvars;
        git commit -m "Adding bracco git variables for latest commit";
        git push "https://${TRAVIS_SECURE_TOKEN}@github.com/datacite/mastino.git" master;
      fi
    fi

notifications:
  slack: datacite:Wt8En0ALoTA6Kjc5EOKNDWxN
  email: false
